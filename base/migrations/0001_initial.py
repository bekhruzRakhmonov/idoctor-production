# Generated by Django 4.0.3 on 2022-03-15 19:02

import base.validators
import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(null=True, upload_to='users/profile_image')),
                ('birth_date', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('bio', models.TextField(null=True)),
                ('status', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnonymousUser',
            fields=[
                ('id', models.IntegerField(editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(default='user<django.db.models.fields.IntegerField>', max_length=2048)),
                ('ip', models.GenericIPAddressField()),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('headline', models.CharField(max_length=255)),
                ('body', ckeditor.fields.RichTextField(validators=[base.validators.validate_article])),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('likes_count', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('comments', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='own_article', to='base.article')),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(null=True)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_seen', models.BooleanField(default=False)),
                ('incoming', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incoming', to=settings.AUTH_USER_MODEL)),
                ('outgoing', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outgoing', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChildComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChildCommentArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ManyToManyField(related_name='child_comment', to='base.childcomment')),
            ],
        ),
        migrations.CreateModel(
            name='CommentArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_comment', to='base.article')),
                ('comment', models.ManyToManyField(related_name='child_comment_article', to='base.childcommentarticle')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_article_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Follower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.ManyToManyField(related_name='follower', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('like', models.BooleanField(default=False)),
                ('anonymous_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='like_post_anonymous_user', to='base.anonymoususer')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='like_post_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(blank=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='posts/images')),
                ('pub_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('likes', models.ManyToManyField(related_name='post_likes', to='base.like')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notf_type', models.CharField(choices=[('following', 'FOLLOWING'), ('post', 'POST'), ('article', 'ARTICLE'), ('comment', 'COMMENT'), ('like', 'LIKE'), ('like_article', 'LIKE-ARTICLE'), ('comment_article', 'COMMENT ARTICLE')], max_length=255, null=True)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('from_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notf_from_user', to=settings.AUTH_USER_MODEL)),
                ('notf_article', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notf_article', to='base.article')),
                ('notf_comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notf_comments', to='base.comment')),
                ('notf_comment_article', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notf_comments_article', to='base.commentarticle')),
                ('notf_follower', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notf_followers', to='base.follower')),
                ('notf_like', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notf_likes', to='base.like')),
                ('notf_post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notf_posts', to='base.post')),
                ('to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notf_to_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_comment', to='base.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_id', models.CharField(max_length=255)),
                ('incoming', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_room_user', to=settings.AUTH_USER_MODEL)),
                ('messages', models.ManyToManyField(related_name='messages', to='base.chatmessage')),
                ('outgoing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='out_room_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='article_likes', to='base.like'),
        ),
    ]
